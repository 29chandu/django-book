==========================
Chapter 2: Getting Started
==========================

Before you can dive into coding your first Django-powered Web site, you'll have
to take care of installing the Django framework itself, along with some minimal
prerequisites. Fortunately, this is usually easy.

Because Django runs anywhere Python does, Django can be configured in many
ways. We've tried to cover the common scenarios for Django installations in
this chapter. Chapter 20 will cover deploying Django to a production
environment.

Installing Python
=================

Django is written in 100% pure Python code, so you'll need to install Python
on your system. Django requires Python 2.3 or higher.

If you're on Linux or Mac OS X, you probably already have Python installed.
Type ``python`` at a command prompt (or in Terminal, in OS X). If you see
something like this, then Python is installed::

    Python 2.4.1 (#2, Mar 31 2005, 00:05:10)
    [GCC 3.3 20030304 (Apple Computer, Inc. build 1666)] on darwin
    Type "help", "copyright", "credits" or "license" for more information.
    >>>

Otherwise, if you see an error such as ``"command not found"``, you'll have to
download and install Python. See http://www.python.org/download/ to get
started. The installation is fast and easy.

Installing Django
=================

Django is available in two flavors: the latest official release and the
development version, called "trunk." The latest official release is a
set-in-stone package with a particular version number (e.g., 0.95 or 1.0),
whereas the development version is the latest-and-greatest version of Django,
updated on a daily -- or, many times, hourly -- basis.

Which version should you use? Here are pluses and minuses to both approaches:

    ====================================  ====================================
    Official release                      Development version ("trunk")
    ====================================  ====================================
    Available features are set in stone   Features are frequently being added
                                          and improved

    Doesn't have access to new features   Has access to new features

    Has a version number, which is good   Doesn't have a version number, but
    for standardization within a          has a revision number, which
    company                               changes each time Django code is
                                          tweaked by its developers; can be
                                          harder to coordinate with a team

    Has a known/fixed set of bugs;        May have more *or* fewer bugs than
    there is no chance of new bugs        the official release; bugs are
    creeping in                           frequently being fixed, but new
                                          feature additions may cause *new*
                                          bugs

    Stable                                Probably stable; Django core
                                          developers try hard to keep it
                                          stable at all times
    ====================================  ====================================

If you're conservative, stick with the official release. If you like living on
the bleeding edge, use the development version.

Installing an Official Release
------------------------------

The latest official release is available at http://www.djangoproject.com/download/

Installation follows the standard Python "distutils" format -- an idiom for
installing third-party Python packages. On a Unix system, follow these steps:

    #. Download the tarball, which will be named according to the version
       number of the release, e.g. ``Django-1.0.tar.gz`` for version 1.0.
    #. ``tar xzvf Django-*.tar.gz``
    #. ``cd Django-*``
    #. ``sudo python setup.py install``

On Windows, we recommend 7-Zip to handle all manner of compressed files,
including .tar.gz. You can get it from http://www.djangoproject.com/r/7zip/

Installing the Development Version
----------------------------------

The development version is available in Django's Subversion repository.

Subversion is a free, open-source revision-control system similar to CVS, and
the Django team uses it to manage changes to the Django codebase. At any
given time, you can use a Subversion client to grab the very latest Django
source code, and, at any given time, you can easily update your local version
of the Django code -- known as your "local checkout" -- to get the latest
changes and improvements made by Django developers.

As we explained above, the Django development version is referred to as
"trunk." The Django team has been known to run production sites on trunk and
strives to keep it stable.

To get the latest Django trunk:

    #. Make sure you have a Subversion client installed. You can get the
       software free from http://subversion.tigris.org/ and excellent
       documentation from http://svnbook.red-bean.com/

    #. Check out the trunk using the command ``svn co
       http://code.djangoproject.com/svn/django/trunk djtrunk``. It doesn't
       matter where on your filesystem you do this.

    #. Create a file named ``django.pth`` within your Python ``site-packages``
       directory (the directory that contains third-party Python libraries
       installed on your system). This ``django.pth`` file should contain a
       single line: the full path to the ``djtrunk`` directory (for example,
       ``"/home/mycode/djtrunk"`` without the quotes). If you're familiar with
       Python, you can update your ``PYTHONPATH`` instead of creating the
       ``django.pth`` file.

    #. Place ``djtrunk/django/bin`` on your system PATH. This directory
       includes management utilities such as ``django-admin.py``.

If .pth files are new to you, you can learn more at
http://www.djangoproject.com/r/python/site-module/

After downloading from the Django Subversion repository and following the above
steps, there's no need to execute ``python setup.py install`` -- you've just
done the work by hand!

Because the Django trunk changes often with bug fixes and feature additions,
you'll probably want to update it every once in a while -- or hourly, if you're
really obsessed. To update the code, just run the command ``svn update`` from
within the ``djtrunk`` directory. When you run that command, Subversion will
contact code.djangoproject.com, see whether any code has changed and update
your local version of the code with any changes that have been made
since you last updated. It's quite slick.

Testing Your Installation
=========================

To test your installation, change into a directory that doesn't include any
files called ``django``. Then start Python by typing ``python``, and try to
import the module ``django``. If the installation worked, the import will work::

    >>> import django
    >>> django.VERSION
    (1, 0, 'official')

.. admonition:: The Python interactive interpreter:

    The Python interactive interpreter is a command-line program that lets you
    write a Python program interactively. To start it, just run the command
    ``python`` at the command line. Throughout this book, we'll feature example
    Python code that's printed as if it's being entered in the interactive
    interpreter. The triple greater-than signs (">>>") signify a Python prompt.

If it didn't work -- i.e., if you got an ``ImportError`` for the
``import django`` statement -- then Django isn't installed properly. Here are
some common errors:

    =========================================================  ===============================================
    Possible error                                             How to debug / solve
    =========================================================  ===============================================
    You have multiple versions of Python installed on your     When you start the Python interactive
    system (e.g., both Python 2.4 and Python 2.5). Django      interpreter, note the version number. Make
    was installed in one version's  ``site-packages``          sure that version number matches the version
    directory, and you started the *other* Python version      number of the Python installation in which you
    when you typed ``python``.                                 installed Django. Either reinstall Django in
                                                               the correct Python installation or start the
                                                               interactive interpreter for the Python version
                                                               where Django is installed. In the latter case,
                                                               for example, this may mean executing the
                                                               command ``python2.5`` (with the explicit
                                                               version number) rather than ``python``.

    Your Python path doesn't include the ``django`` package.   Type ``import sys; print sys.path`` in the
                                                               Python interactive interpreter. This is the
                                                               list of directories that Python checks for
                                                               packages. If none of those directories
                                                               contains a file called ``django``, you'll
                                                               either need to alter your Python path to
                                                               include the directory containing ``django``,
                                                               or you'll need to move the ``django``
                                                               directory into one of those Python path
                                                               directories.
    =========================================================  ===============================================

Setting Up a Database
=====================

Django's only prerequisite is a working installation of Python. However,
this book focuses on one of Django's sweet spots, which is developing
*database-backed* Web sites -- so you'll need to install a database server of
some sort, for storing your data.

If you just want to get started playing with Django, skip ahead to `Starting a
project`, but trust us -- you'll want to install a database eventually. The
advanced examples in the book assume you've got a database set up.

As of this writing, Django supports three database engines:

    * PostgreSQL (http://www.postgresql.org/)
    * SQLite 3 (http://www.sqlite.org/)
    * MySQL (http://www.mysql.com/)

In each case, you'll need two things: access to a database server somewhere
and the appropriate Python client libraries to be able to communicate with
that database server. We'll give details about each database engine's
requirements shortly.

If you just want to play around with Django and don't have access (or desire)
to install a database server, we highly recommend SQLite. SQLite is an
extremely simple in-process database engine that doesn't require any sort of
server setup or configuration. Plus, a SQLite comes bundled with Python 2.5.

We also recommend SQLite with Python 2.5 if you're using Windows, if only
because other database engines and clients can be difficult to set up on
Windows.

Using Django With PostgreSQL
----------------------------

If you're using PostgreSQL, you'll need the ``psycopg`` package available from
http://www.djangoproject.com/r/python-pgsql/. Take note of whether you're using
version 1 or 2; you'll need this information later.

If you're using PostgreSQL on Windows, you can find precompiled binaries of
``psycopg`` at http://www.djangoproject.com/r/python-pgsql/windows/.

Using Django With SQLite 3
--------------------------

If you're using Python version 2.5 or higher, you've already got SQLite, and
there's no need to install anything.

If you're using Python 2.4 or older, you'll need SQLite 3 -- not version 2 --
from http://www.djangoproject.com/r/sqlite/ and the ``pysqlite`` package from
http://www.djangoproject.com/r/python-sqlite/. Make sure you have ``pysqlite``
version 2.0.3 or higher.

On Windows, you can skip installing the separate SQLite binaries, because
they're staticly linked into the ``pysqlite`` binaries.

Using Django With MySQL
-----------------------

Django requires MySQL 4.0 or above; the 3.x versions don't support nested
subqueries and some other fairly standard SQL statements. You'll also need
the ``MySQLdb`` package from http://www.djangoproject.com/r/python-mysql/.

Using Django Without a Database
-------------------------------

As mentioned earlier, Django doesn't actually require a database. If you just
want to use it to serve dynamic pages that don't hit a database, that's
perfectly fine.

With that said, bear in mind that some of the extra tools bundled with Django
*do* require a database, so if you choose not to use a database, you'll miss
out on those features. (We highlight these features throughout this book.)

Starting a Project
==================

Once you've installed Django and whichever database library you'll be using,
you'll be ready to start coding. The first step of coding a Web application
with Django is the creation of a **project**.

A project is a collection of settings for an instance of Django -- including
database configuration, Django-specific options and application-specific
settings. It's the heart of your Django site.

To start a new project, first create a directory to work in -- such as
``/home/username/djcode``. If your background is in PHP, you're probably used
to putting code under your Web server's document root (in a place such as
``/var/www``). With Django, you don't do that. It's not a good idea to put any
of this Python code within your Web server's document root, because it risks
the possibility that people may be able to view your code over the Web. That's
not good for security.

Once you've created that directory, change into it using ``cd``. Then, run the
command ``django-admin.py startproject mysite``. This will create a ``mysite``
directory in your current directory.

.. admonition:: Trouble?

    If you get an error such as ``django-admin.py: command not found``, that
    means the ``django-admin.py`` utility is not on your system path (the list
    of directories that your system checks for program names). There are a
    couple ways of rectifying this.

        1. You can try adding the ``django/bin`` directory to your system path.
           This directory lives within the Django source code, wherever you
           installed Django. For example, if you followed the instructions from
           earlier in this chapter and you're using Python 2.5 on Linux, the
           directory probably lives at ``/usr/lib/python2.5/site-packages/django/bin``.
           To add it to your path on Unix, run this command::

               export PATH=$PATH:/path/to/django/bin

           On Windows, you'll need to update your PATH environment variable.

        2. Alternatively, on Unix systems, you can create a symlink to
           ``django-admin.py`` from a directory that's already on your path,
           such as ``/usr/local/bin``. Use this command::

               sudo ln -s /path/to/django/bin/django-admin.py /usr/local/bin/django-admin.py

Let's look at what ``startproject`` created::

    mysite/
        __init__.py
        manage.py
        settings.py
        urls.py

These files are:
    ``__init__.py``
        A file required by Python in order to treat the directory as a package
        of Python modules.

    ``manage.py``
        A command-line utility that lets you interact with this Django project
        in various ways.

    ``settings.py``
        Settings/configuration for this Django project.

    ``urls.py``
        The URL declarations for this Django project; a "table of contents" of
        your Django-powered site.

Note that ``startproject`` *might* also create files with ``.pyo`` or ``.pyc``
extensions. These are compiled versions of the Python source files, and you can
safely ignore them.

The Development Server
----------------------

Django includes a built-in, lightweight Web server you can use while developing
your site. We've included this so you can develop things rapidly, without
having to deal with configuring your production Web server (e.g., Apache) until
you're ready for production. This development server watches your code for
changes and automatically reloads, helping you make many rapid changes to your
project without needing to restart anything. Throughout the examples in this
book, we'll be using the development server, rather than more robust deployment
solutions, due to ease of use.

Let's start the Django development server for the first time. To do this,
``cd`` into the ``mysite`` directory that ``startproject`` created. Then run
the command ``python manage.py runserver``. You should see something like
this::

    Validating models...
    0 errors found.

    Django version 1.0, using settings 'mysite.settings'
    Development server is running at http://127.0.0.1:8000/
    Quit the server with CONTROL-C.

Although the development server is extremely nice for, well, development,
resist the temptation to use this server in anything resembling a production
environment. The development server can only handle a single request at a time
reliably, and it has not gone through a security audit of any sort. When the
time comes to launch your site, see Chapter 20 for information on how to
deploy Django.

.. admonition:: Changing the host or the port

    By default, the ``runserver`` command starts the development server on
    port 8000, listening only for local connections (i.e., connections from
    the same computer).

    If you want to change the server's port, pass it as a command-line argument::

        python manage.py runserver 8080

    You can also change the IP address that the server listens on; this is
    especially helpful if you'd like to show your work to other developers. The
    following command will tell Django to listen on any network interface, thus
    allowing other computers to connect to the development server::

        python manage.py runserver 0.0.0.0:8080

Now that the server's running, visit http://127.0.0.1:8000/ with your Web
browser. You'll see a pleasant "Welcome to Django" page. It worked!

What's Next?
============

Now that we've got everything installed and the development server running,
let's write some basic code that demonstrates how to serve Web pages using
Django.
