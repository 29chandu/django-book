==========================
Chapter 2: Getting started
==========================

Let's get started, shall we?

Fortunately for you (but not for us), installing Django is far easier than
explaining how to install it. Because Django runs anywhere Python does, there
are a lot of possibilities when it comes to Django configurations.  We've tried to
cover the common scenarios for Django installations below.

Installing Python
-----------------

Django is 100% pure unfiltered Python, so you'll need it installed. Django
supports Python 2.3 or better. 

If you are on Linux or Mac OS X, you probably
already have Python installed; type ``python`` at a shell (or in Terminal for OS X folks);
if you see something like::

    Python 2.4.1 (#2, Mar 31 2005, 00:05:10) 
    [GCC 3.3 20030304 (Apple Computer, Inc. build 1666)] on darwin
    Type "help", "copyright", "credits" or "license" for more information.
    >>>
    
then you're good to go.

Otherwise, see http://www.python.org/download/ to get started.  In most cases, 
installing Python is as easy as downloading a package for your operating system.

Installing Django
=================

Installing an official release
------------------------------

Most people will want to install the latest official release from
http://www.djangoproject.com/download/. Django uses the standard Python
``distutils`` installation method, which in Linux-land looks like:

    #. Download the tarball, which will be named something like ``Django-1.0.tar.gz``.
    #. ``tar xzvf Django-*.tar.gz``
    #. ``cd Django-*``.
    #. ``sudo python setup.py install``.
    
.. XXX Do we want to spend more space on installation? Is there a distutils
.. XXX guide we can point to that covers Windows and all the other
.. XXX permutations?
.. XXX JGD I'll cover Windows install, but I'll probably use ActiveState's.

If everything worked, you should be able to import django and verify the version::

    >>> import django
    >>> django.__version__
    '1.0'
    
Installing Django from Subversion
---------------------------------

If you want to work on the bleeding edge, or if you want to hack on Django
itself, you'll want to install Django from its Subversion repository:

    #. Make sure you have Subversion (http://subversion.tigris.org/) installed.
       
    #. Check out the trunk: ``svn co
       http://code.djangoproject.com/svn/django/trunk django_src``
       
    #. Symlink ``django_src/django`` so that ``django`` is within your Python
       ``site-packages`` directory, or update your PYTHONPATH to point to it.

.. XXX JGD No such thing as symlink in most Windows setups.  
.. XXX JGD You -can- use a utility called Junction (made by Sys Internals, 
.. XXX JGD and free), but what's the downside of just using a .pth?

.. XXX JGD Also, it might be useful to recommend a book on svn (or link to 
.. XXX JGD the free one on red-bean.org (sorry, can't verify link right now)).
       
When installing from Subversion, you don't need to run ``python setup.py install``.  To update django, just run ``svn update`` from within the ``django_src`` directory.

Setting up a database
=====================

Django's only prerequisite is a working installation of Python.  However,
since we're developing websites, at some point you'll need to store
your data somewhere, and that's where databases come in.  

If you just want to get started playing with Django, skip ahead to `Starting a
project`, but trust us -- you'll want to install a database eventually.  All
the examples in the book assume you've got a database set up.

As of version 1.0, Django supports five database engines:

    * PostgreSQL (http://www.postgresql.org/)
    * SQLite 3 (http://www.sqlite.com/)
    * MySQL (http://www.mysql.com/)
    * Microsoft SQL Server (http://www.microsoft.com/).
    * Oracle (http://www.oracle.com/)

.. XXX JGD As of 0.92, DJ doesn't support SQL Server or Oracle.  
.. XXX JGD Make sure it does before publishing, or remove the last 2 points.

We're quite fond of PostgreSQL ourselves, so we mention it first. However all
those engines will work equally well.

SQLite also deserves special notice: it's an extremely simple in-process
database engine that doesn't require any sort of server set up or
configuration. It's by far the easiest to set up if you just want to play
around with Django.

Using Django with PostgreSQL
----------------------------

If you're using PostgreSQL, you'll need the ``psycopg`` package available from
http://initd.org/projects/psycopg1. Make sure you use version 1, not version 2
(which is still in beta).

.. XXX JGD Verify psycopg 2 still in beta when book is finished.

If you're using PostgreSQL on Windows, you can find precompiled binaries of
``psycopg`` at http://stickpeople.com/projects/python/win-psycopg/.

Using Django with SQLite 3
--------------------------

You'll need SQLite 3 -- not version 2 -- and the ``psysqlite`` package from
http://initd.org/tracker/pysqlite. Make sure you have ``pysqlite`` version 2.0.3
or higher.

Using Django with MySQL
-----------------------

Django requires MySQL 4.0 or above; the 3.x versions don't support transactions,
nested procedures, and some other fairly standard SQL statements.  You'll also need
the ``MySQLdb`` package from http://sourceforge.net/projects/mysql-python.

Using Django with MSSQL
-----------------------

.. XXX To be completed when this actually works.

Using Django with Oracle
------------------------

.. XXX To be completed when this actually works.

Using Django without a database
-------------------------------

As mentioned above, Django doesn't actually require a database, although you'll
obviously not be able to take advantage of the cool data abstraction layer.  If
you are not going to use a database, you'll probably want to skip ahead to 
Chapter XXX where we start talking about views.

.. XXX JGD do steps on latest trunk (ancient mr on laptop)

Starting a project
==================

.. The below (down to "The rest of this section") is adapted from "Initial    
.. setup" in tutorial01.txt.

If this is your first time using Django, you'll have to take care of some
initial setup.

Run the command ``django-admin.py startproject myproject``. That'll create a
``myproject`` directory in your current directory.

..note ::
    
    ``django-admin.py`` should be on your system path if you installed Django
    via its setup.py utility. If it's not on your path, you can find it in
    ``site-packages/django/bin``; consider symlinking to it from some place on
    your path, such as /usr/local/bin.

.. XXX JGD again, the symlink issue on Windows.  Junction, or add to path?

A project is a collection of settings for an instance of Django -- including
database configuration, Django-specific options and application-specific
settings. Let's look at what ``startproject`` created::

    myproject/
        __init__.py
        manage.py
        settings.py
        urls.py

These files are:

    ``manage.py``
        A command-line utility that lets you interact with this Django project
        in various ways.
    
    ``settings.py``
        Settings/configuration for this Django project.
        
    ``urls.py``
        The URL declarations for this Django project; a "table of contents" of
        your Django-powered site.

.. admonition:: Where should this code live?

    If your background is in PHP, you're probably used to putting code under the
    Web server's document root (in a place such as ``/var/www``). With Django,
    you don't do that. It's not a good idea to put any of this Python code within
    your Web server's document root, because it risks the possibility that
    people may be able to view your code over the Web. That's not good for
    security.

    Put your code in some directory **outside** of the document root, such as
    ``/home/mycode``.

The development server
----------------------

Change into the ``myproject`` directory, if you haven't already, and run the
command ``python manage.py runserver``. You'll see the following output on the
command line::

    Validating models...
    0 errors found.

    Starting server on port 8000 with settings module 'myproject.settings'.
    Go to http://127.0.0.1:8000/ for Django.
    Quit the server with CONTROL-C (Unix) or CTRL-BREAK (Windows).

You've started the Django development server, a lightweight, pure-Python Web
server that builds on the HTTP server included in Python's standard library.
We've included this with Django so you can develop things rapidly, without
having to deal with configuring Apache until you're ready for production. This
development server watches your code for changes and automatically reloads,
helping you make many rapid changes to your project without needing to restart
anything.

Although the development server is extremely nice for, well, development,
resist the temptation to use this server in anything resembling a production
environment. The development server will only handle a single request at a
time, and is likely totally insecure. When it comes time to launch your site,
see Chapter XXX for information on how to deploy Django.

.. admonition:: Changing the host or the port

    By default, the ``runserver`` command starts the development server on
    port 8000, listening only for local connections. If you want to change the
    server's port,  pass it as a command-line argument::

        python manage.py runserver 8080
        
    You can also change the IP address that the server listens on.  This
    is especially helpful if you'd like to share a development site with
    other developers::
    
        python manage.py runserver 0.0.0.0:8080
        
    will make Django listen on any network interface, thus allowing other
    computers to connect to the development server.
    
Now that the server's running, visit http://127.0.0.1:8000/ with your Web
browser. You'll see a "Welcome to Django" page, in pleasant, light-blue pastel.
It worked!

Database setup
--------------

Now, edit ``settings.py``. It's a normal Python module with module-level
variables representing Django settings. Change these settings to match your
database's connection parameters:

    ``DATABASE_ENGINE``
        Either 'postgresql', 'mysql', 'sqlite3', `ado_mssql`, or `oracle`. See
        `Setting up a database` for more information about each database
        Django supports
        
    ``DATABASE_NAME``
        The name of your database, or the full (absolute) path to the database
        file if you're using SQLite.
        
    ``DATABASE_USER``
        Your database username (not used for SQLite).
        
    ``DATABASE_PASSWORD``
        Your database password (not used for SQLite).
        
    ``DATABASE_HOST``
        The host your database is on. Leave this as an empty string if your
        database server is on the same physical machine (not used for SQLite).

.. note::

    Make sure you've created a database within PostgreSQL or MySQL by this
    point. Do that with "``CREATE DATABASE database_name;``" within your
    database's interactive prompt.

Run the following command to initialize your database with Django's default
installed apps::

    python manage.py syncdb

The ``syncdb`` command takes care of initalizing your database with any tables
not yet defined. You'll run it any time you add new models to your project;
see Chapter 3 for more information on the ``manage.py`` utility and the
``syncdb`` command.

If you're interested, run the command-line client for your database and type
``\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL), or ``.schema`` (SQLite) to
display the tables Django created.

About the rest of this book
===========================

The rest of this section will focus on a building a single project: a complete web
site. Since Django's perfect for building so many different kinds of sites, we
had quite a bit of trouble figuring out what to build in this book.

We thought about building a blog, but (a) that's boring and (b) since Django
makes boring tasks so easy we were afraid that we'd be done before we even
started to clear our throats.

We thought about riding the "Web 2.0" wave -- we almost registered the domain
name "e.pl.urbib.us" hoping that Yahoo! would give us $1 million us on the
strength of the domain name alone -- but publishing schedules being what they
are we decided that we'd already be working on Web 3.1 by the time these words
see the printer.

We even thought about building a [CENSORED] until until a nice gentleman from
the NSA paid us a visit and [CENSORED] to [CENSORED] our [CENSORED] if we
[CENSORED].

In the end, though, we decided to take the path of least resistance and discuss
a site that already exists: chicagocrime.org.

.. XXX JGD Really doing chi crime?  I heard from APress that it'd be something similar, but not the same.  

For those who aren't familiar with the site: chicagocrime.org is a non-profit,
freely browseable database of crimes reported in Chicago.  It maps public
data from the Chicago Police Department with the Google Maps API and provides
many ways to browse and search the data.  You can sift through crimes by type,
ZIP code, location, or date; you can search for crimes by keyword, and you can
even plot crimes that occurred along a given route.

Chicagocrime.org was one of the first "mash-ups" to gain widespread attention
and has inspired countless similar projects. The site won the 2005 Batten
Award for Innovations in Journalism, and was named one of 2005's "best ideas"
by the New York Times.

Throughout the rest of this book, we'll be using examples from the actual code
that drives the site to illustrate how Django works. We also hope that by
examining a real-world project you'll come away with a concrete feel for *why*
Django works the way it does.

Shall we get started?
