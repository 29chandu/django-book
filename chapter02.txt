==========================
Chapter 2: Getting started
==========================

We think it's best to get a running start.  The details and extent of
the framework will be fleshed out in the later chapters, but for now,
trust us.  This'll be fun.

Installing Django is easy. Because Django runs anywhere Python does,
Django can be configured in many ways. We've tried to cover the common
scenarios for Django installations in this chapter.  Chapter 21 will
cover deploying Django to production.

Installing Python
=================

Django is written in 100% pure Python code, so you'll need to install Python
on your system. Django requires Python 2.3 or higher.

If you're on Linux or Mac OS X, you probably already have Python installed.
Type ``python`` at a command prompt (or in Terminal, in OS X). If you see
something like this, then Python is installed::

    Python 2.4.1 (#2, Mar 31 2005, 00:05:10)
    [GCC 3.3 20030304 (Apple Computer, Inc. build 1666)] on darwin
    Type "help", "copyright", "credits" or "license" for more information.
    >>>

Otherwise, if you see an error such as ``"command not found"``, you'll have to
download and install Python. See http://www.python.org/download/ to get
started. The installation is fast and easy.

Installing Django
=================

Installing an official release
------------------------------

Most people will want to install the latest official release from
http://www.djangoproject.com/download/. Django uses the standard Python
``distutils`` installation method, which in Linux land looks like:

    #. Download the tarball, which will be named something like ``Django-1.0.tar.gz``.
    #. ``tar xzvf Django-*.tar.gz``
    #. ``cd Django-*``
    #. ``sudo python setup.py install``

.. XXX Do we want to spend more space on installation? Is there a distutils
.. XXX guide we can point to that covers Windows and all the other
.. XXX permutations?
.. XXX JGD I'll cover Windows install, but I'll probably use ActiveState's.

Change into some other directory and start ``python``.  If everything worked, you 
should be able to import the module ``django``:

    >>> import django
    >>> django.VERSION
    (1, 0, 'official')

.. admonition:: The Python interactive interpreter:

    The Python interactive interpreter is a command-line program that lets you
    write a Python program interactively. To start it, just run the command
    ``python`` at the command line. Throughout this book, we'll feature example
    Python code that's printed as if it's being entered in the interactive
    interpreter. The triple greater-than signs (">>>") signify a Python prompt.

Installing Django from Subversion
---------------------------------

If you want to work on the bleeding edge, or if you want to contribute code to
Django itself, you should install Django from its Subversion repository.

Subversion is a free, open-source revision-control system similar to CVS, and
the Django team uses it to manage changes to the Django codebase. At any
given time, you can use a Subversion client to grab the very latest Django
source code, and, at any given time, you can update your local version of the
Django code -- known as your "local checkout" -- to get the latest changes and
improvements made by Django developers.

The latest-and-greatest Django development code is referred to as "the
trunk."  The Django team runs production sites on trunk and strives to
keep it stable.

To grab the latest Django trunk:

    #. Make sure you have a Subversion client installed. You can get the
       software free from http://subversion.tigris.org/ and excellent
       documentation from http://svnbook.red-bean.com/

    #. Check out the trunk using the command ``svn co
       http://code.djangoproject.com/svn/django/trunk djtrunk``

    #. Symlink ``site-packages/django`` to the ``djtrunk/django``
       directory, or  update your PYTHONPATH to point to ``djtrunk``.

    #. Place ``djtrunk/django/bin`` on your PATH.  This directory
       includes management utilities such as django-admin.py.

.. XXX JGD No such thing as symlink in most Windows setups.
.. XXX JGD You -can- use a utility called Junction (made by Sys Internals,
.. XXX JGD and free), but what's the downside of just using a .pth?

After installing from Subversion, and following the above steps,
there's no need to ``python setup.py install`` -- you've just done the
work by hand!

Because the Django trunk changes often with bug fixes and feature additions,
you'll probably want to update it every once in a while -- or hourly, if you're
really obsessed. To update the code, just run the command ``svn update`` from
within the ``djtrunk`` directory. When you run that command, Subversion will
contact code.djangoproject.com, see if any code has changed and update
your local version of the code with any changes that have been made
since you  last updated. It's quite slick.

Setting up a database
=====================

Django's only prerequisite is a working installation of Python. However,
this book focuses on one of Django's sweet spots, which is developing
*database-backed* Web sites -- so you'll need to install a database server of
some sort, for storing your data.

If you just want to get started playing with Django, skip ahead to `Starting a
project`, but trust us -- you'll want to install a database eventually. All of
the examples in the book assume you've got a database set up.

As of version 1.0, Django supports five database engines:

    * PostgreSQL (http://www.postgresql.org/)
    * SQLite 3 (http://www.sqlite.org/)
    * Microsoft SQL Server (http://www.microsoft.com/sql/)
    * MySQL (http://www.mysql.com/)
    * Oracle Database (http://www.oracle.com/database/)

.. XXX JGD As of 0.95, DJ doesn't support SQL Server or Oracle.
.. XXX JGD Make sure it does before publishing, or remove the last 2 points.

We're quite fond of PostgreSQL ourselves, for reasons outside the scope of this
book, so we mention it first. However, all those engines will work equally well
with Django.

SQLite also deserves special notice as a development tool: It's an
extremely simple in-process database engine that doesn't require any
sort of server set up or configuration. It's by far the easiest to set
up if you just want to play around with Django, and it's even included
in the standard library of Python 2.5.

Using Django with PostgreSQL
----------------------------

If you're using PostgreSQL, you'll need the ``psycopg`` package available from
http://initd.org/projects/psycopg1. Make sure you use version 1, not version 2
(which is still in beta).

.. XXX JGD psycopg2 is no longer in beta.  Change to recommend psycopg2 above or 
.. XXX JGD explain why not.

If you're using PostgreSQL on Windows, you can find precompiled binaries of
``psycopg`` at http://stickpeople.com/projects/python/win-psycopg/.

Using Django with SQLite 3
--------------------------

If you've got a Python version over 2.5, you've already got SQLite.
If you're working with Python 2.4 or older, you'll need SQLite 3 --
not version 2 -- and the ``pysqlite`` package from
http://initd.org/tracker/pysqlite. Make sure you have ``pysqlite``
version 2.0.3 or higher.  On Windows, you can skip installing the
separate SQLite binaries, since they're staticly linked into the
pysqlite binaries.

Using Django with MySQL
-----------------------

Django requires MySQL 4.0 or above; the 3.x versions don't support nested
subqueries and some other fairly standard SQL statements. You'll also need
the ``MySQLdb`` package from http://sourceforge.net/projects/mysql-python.

Using Django with MSSQL
-----------------------

.. XXX To be completed when this actually works.

Using Django with Oracle
------------------------

Django requires Oracle database versions 9i and 10g. You will need to
install version 4.2 or better of the cx_Oracle package from
http://sourceforge.net/projects/cx-oracle/.

Using Django without a database
-------------------------------

As mentioned above, Django doesn't actually require a database. If you just
want to use it to serve dynamic pages that don't hit a database, that's
perfectly fine.

With that said, bear in mind that some of the extra tools bundled with Django
*do* require a database, so if you choose not to use a database, you'll miss
out on those features. (We'll highlight these features throughout this book.)

Starting a project
==================

.. The below (down to "The rest of this section") is adapted from "Initial
.. setup" in tutorial01.txt.

A project is a collection of settings for an instance of Django -- including
database configuration, Django-specific options and application-specific
settings.   

If this is your first time using Django, you'll have to take care of
some initial setup.  Create a new directory to start working in,
perhaps something like ``/home/username/djcode/``, and change into
that directory.

.. note::

    ``django-admin.py`` should be on your system path if you installed Django
    via its setup.py utility. If it's not on your path, you can find it in
    ``site-packages/django/bin``; consider symlinking to it from some place on
    your path, such as /usr/local/bin, using a command such as:
    sudo ln -s /path/to/django/bin/django-admin.py /usr/local/bin/django-admin.py

.. XXX JGD again, the symlink issue on Windows.  Junction, or add to path?


Run the command ``django-admin.py startproject mysite``. That'll create a
``mysite`` directory in your current directory.

Let's look at what ``startproject`` created::

    mysite/
        __init__.py
        manage.py
        settings.py
        urls.py

These files are:
    ``__init__.py``
        A file required for Python treat the directory as a package
        (i.e. a group of modules).

    ``manage.py``
        A command-line utility that lets you interact with this Django project
        in various ways.

    ``settings.py``
        Settings/configuration for this Django project.

    ``urls.py``
        The URL declarations for this Django project; a "table of contents" of
        your Django-powered site.

.. admonition:: Where should this code live?

    If your background is in PHP, you're probably used to putting code under the
    Web server's document root (in a place such as ``/var/www``). With Django,
    you don't do that. It's not a good idea to put any of this Python code within
    your Web server's document root, because it risks the possibility that
    people may be able to view your code over the Web. That's not good for
    security.

    Put your code in some directory **outside** of the document root.

The development server
----------------------

Django includes a built-in, lightweight Web server you can use while
developing your site. We've included this so you can develop things
rapidly, without having to deal with configuring your production Web
server (e.g., Apache) until you're ready for production. This development
server watches your code for changes and automatically reloads, helping you
make many rapid changes to your project without needing to restart
anything.

Change into the ``mysite`` directory, if you haven't already, and run the
command ``python manage.py runserver``. You'll see something like this::

    Validating models...
    0 errors found.

    Django version 1.0, using settings 'mysite.settings'
    Development server is running at http://127.0.0.1:8000/
    Quit the server with CONTROL-C.

Although the development server is extremely nice for, well, development,
resist the temptation to use this server in anything resembling a production
environment. The development server can only handle a single request at a time
reliably, and it has not gone through a security audit of any sort. When the
time comes to launch your site, see Chapter 21 for information on how to
deploy Django.

.. admonition:: Changing the host or the port

    By default, the ``runserver`` command starts the development server on
    port 8000, listening only for local connections. If you want to change the
    server's port, pass it as a command-line argument::

        python manage.py runserver 8080

    You can also change the IP address that the server listens on.  This
    is especially helpful if you'd like to share a development site with
    other developers::

        python manage.py runserver 0.0.0.0:8080

    will make Django listen on any network interface, thus allowing other
    computers to connect to the development server.

Now that the server's running, visit http://127.0.0.1:8000/ with your Web
browser. You'll see a "Welcome to Django" page, in pleasant, light-blue pastel.
It worked!

What's next?
============

Now that we've got everything installed and the development server running,
let's write some basic code that demonstrates how to serve Web pages using
Django.
