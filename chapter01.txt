==========================
Chapter 1: What is Django?
==========================

If you go to the Web site djangoproject.com with your Web browser -- or,
depending on the decade in which you're reading this destined-to-be-timeless
literary work, using your cell phone, electronic notebook, shoe, or any
Internet-superceding contraption -- you'll find this explanation:

    "Django is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design."

That's a mouthful -- or eyeful or pixelful, depending on whether this book is
being recited, read on paper or projected to you on a Jumbotron, respectively.

Let's break it down.

(FOOTNOTE: If the Web site djangoproject.com doesn't contain that sentence,
find the nearest DeLorean automobile; accelerate it to approximately 88 mph and
travel to the year 2005 -- although not before a quick side trip to 1990 to
halt production of "Back to the Future III.")

Django is a high-level Python Web framework...
==============================================

A Web framework is software that eases the pain of building dynamic Web sites.
It abstracts common problems of Web development and provides shortcuts for
frequent programming tasks.

In general, a good Web framework solves these problems:

    * It provides a method of mapping requested URLs to code that handles
      requests.

    * It makes it easy to display, validate and redisplay HTML forms.

    * It converts user-submitted input, such as HTML form submissions, into
      data structures that are convenient for manipulating.

    * It helps separate content from presentation via a template system, so you
      can change your site's look-and-feel without affecting your content,
      and vice-versa.

    * It conveniently integrates with storage layers -- such as databases --
      but doesn't strictly require the use of a database.

    * It gets out of your way, neglecting to leave dirty stains on your
      application such as URLs that contain ".aspx".

Django does all of these things quite well -- and introduces a number of
features that raise the bar for what a Web framework should do.

Django uses Python -- a beautiful, concise, powerful, high-level programming
language. To develop a site using Django, you write Python code that uses the
Django libraries. Although this book doesn't include a full Python tutorial,
it highlights Python features and functionality where appropriate, when code
doesn't immediately make sense.

...that encourages rapid development...
=======================================

Regardless of how many powerful features it has, a Web framework is worthless
if it doesn't save you time. Django's philosophy is to do all it can to
facilitate hyper-fast development. With Django, you build Web sites in a matter
of hours, not days; weeks, not years.

This is possible largely thanks to Python itself. Oh, Python, how we love thee,
let us count the bullet points:

    * Python is an **interpreted language**, which means there's no need to
      compile code.

    * Python is **dynamically typed**, which means you don't have to worry
      about declaring data types for your variables.

    * Python syntax is **concise yet expressive**, which means it takes less
      code to accomplish the same task than in other, more verbose, languages
      such as Java. One line of python usually equals 10 lines of Java. (This
      has a convenient side benefit: Fewer lines of code means fewer bugs.)

    * Python offers **powerful introspection and metaprogramming** features,
      which make it possible to inspect and add behavior to objects at runtime.

Beyond the productivity advantages implicit in Python, Django itself takes
every measure to encourage rapid development. Every part of the framework was
designed with productivity in mind.

...and clean, pragmatic design
==============================

Finally, Django strictly maintains a clean design throughout its own code and
the applications you create.







What Django doesn't do
======================

Of course, we want this book to be fair and balanced. With that in mind, we
should be honest and outline what Django *doesn't* do:

    * Feed your cat.

    * Mind-read your project requirements and implement them on a carefully
      timed basis so as to fool your boss into thinking you're not really
      staying home to watch "The Price is Right."

On a serious note, Django does not yet reverse the effects of global warming.

Why was Django developed?
=========================


# ENDS HERE. THE REST IS NOTES. ###############################################







The goal of this book is to explain all the marvellous things Django does --
and to make you an expert at using it.

We're glad you're here!

-------------------------------------------------------------------------------

        * What is Django?
        * Why was Django developed?
        * Who uses Django?
        * Who should use Django?

Django was created in Lawrence, Kansas -- a great American college town
