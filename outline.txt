=======
Outline
=======

Part 1: Getting started
=======================

1. Introduction to Django (Draft done; tech edit done)

    * What is Django?
    * Why was Django developed?
    * Who uses Django?
    * Who should use Django?

2. Getting started (Draft done)

    * Installing Python
    * Installing Django
    * Setting up a database
    * Starting a project

3. The basics of generating Web pages (Draft done)

    Example view: Telling the current date and time

    * Your first view: Dynamic content
    * Your first URLconf
    * How Django processes a request
    * URLconfs and loose coupling
    * 404 errors
    * Your second view: Dynamic URLs
    * Django's pretty error pages
    * Exercises

4. The Django template system

    * What's a template?
    * Why use templates?
    * Templating the first view

5. Interacting with a database: Models

    Example models: Book, Author, Publisher

    * What's a model?
    * Defining the first model
    * Installing models
    * Playing with the basic Python CRUD API

6. The Django admin site

    Example: Continues models from previous chapter

    * What's the admin site?
    * Playing with the auto-generated admin
    * Adding admin options to our model

7. Form processing

    This chapter will have to wait until we rewrite the manipulator system

    * Manipulators, FormWrappers, and FormFields (oh my!)
    * Using automatically generated manipulators
    * A view for form processing

8. Advanced views and URLconfs

    * Views are callable objects
    * Views are iterators
    * Advanced URLconf usage

Part 2: Django's sub-frameworks
===============================

9. Generic views

    * What are generic views?
    * "Simple" generic views
    * Serving static files
    * List/detail generic views
    * Date-based generic views
    * Create/update/delete generic views

10. Extending the template engine

    * Custom template tag/filter libraries
    * Context processors
    * Template loaders

11. Outputting non-HTML responses

    * Creating an simple RSS feed
    * Creating parameterized RSS feeds
    * Creating images and PDFs
    * Outputting other formats
    * Sending and receiving email

12. Sessions, users, and registration

    * Users, groups and permissions
    * Accepting public registrations
    * Views that require login
    * The sessions framework

13. Comments

    * The free-comments framework
    * The registered-users comments framework
    * Comment moderation

14. Caching

    * Setting up the cache
    * Caching entire sites
    * Caching certain views
    * The low-level cache API
    * Cache-control with HTTP headers

15. Other contributed sub-frameworks

    * Content-types
    * CSRF
    * Flatpages
    * Redirects
    * Markup
    * Sites

16. Middleware

    * What is middleware?
    * Built-in middleware
    * Writing custom middleware

17. Integrating with legacy databases and applications

    * Auto-generating models from a database
    * How to use Django for only *part* of your site

18. Customizing the Django admin

    * Customizing the look and feel
    * Customizing the functionality
    * Using the admin functionality outside of the admin

19. Internationalization and localization

    * Overview
    * Internationalizing your Python code
    * Internationalizing templates
    * Switching languages
    * Creating translation files

20. Security

    * Protection against SQL injection
    * Preventing XSS
    * Dealing with 'bots, spiders, and other malicious browsers
    * Techniques for dealing with user submitted content
    * ...

21. Deploying Django

    * General deployment advice and options
    * Deploying Django with mod_python
    * Deploying Django with FCGI
    * How to scale up

Part 3: Case studies
====================

22. Chicagocrime.org

23. Bank account

24. Weblog

25. Am I Hot or Not?

26. Tinyurl.com


Part 4: Reference
=================

Each of these chapters is basically a printed version of a single document from the only Django documentation, perhaps modified slightly to fit better with the book.

The order for these is still TBD.

    #. Model definition reference (docs/model-api.txt)

    #. Database API reference (docs/db-api.txt)

    #. Transactions (docs/transactions.txt) -- should this perhaps get an
       actual chapter?

    #. URL dispatch reference (docs/url_dispatch.txt)

    #. Settings reference (docs/settings.txt)

    #. Built-in template tag/filter reference (docs/templates.txt)

    #. The django-admin/manage.py utility (docs/django-admin.txt)

    #. Request and response objects (docs/request_response.txt)

Appendix
========

* Regular expression reference

Assumptions we make about the reader
====================================

* Already knows basic computer-programming theory.

* Does not necessarily know Python.

* Does not necessarily have Web development experience.

* Already knows SQL.

Things without a home
=====================

Settings files


A few topics that the book needs to address that don't have a home in this outline:

    * Validators.  Not enough here to really warrant its own chapter... so
      where?

    * An "advanced" model walkthrough.  We've got chapters set aside for model
      and db references; is that enough or should we have an advanced models
      chapter, perhaps between the current chapters 7 and 8?
