==============================================
Chapter 5: Interacting with a database: Models
==============================================

In Chapter 3, we covered the fundamentals of building dynamic Web sites
with Django: setting up views and URLconfs. As we explained, a view is
responsible for doing *some arbitrary logic*, then returning a response. In the
example, our *arbitrary logic* was to calculate the current date and time.

In many modern Web applications, the *arbitrary logic* involves interacting
with a database. Behind the scenes, a so-called **database-driven Web site**
connects to a database server, retrieves some data out of it and displays that
data, nicely formatted, on a Web page. Or, similarly, the site could provide
functionality that lets site visitors populate the database on their own.

Many complex Web sites provide some combination of the two. Amazon.com, for
instance, is a great example of a database-driven site. Each product page is
essentially an HTML view into Amazon's product database, and when you post a
customer review, it gets inserted into the database of reviews.

Django is very well-suited for making database-driven Web sites, as it comes
with easy yet powerful ways of performing database queries using Python. This
chapter explains that functionality -- Django's database layer.

(Note: While it's not strictly necessary to know basic database theory and SQL
in order to use Django's database layer, it's highly recommended. An
introduction to those concepts is out of the scope of this book, but keep
reading even if you're a database newbie. You'll probably be able to follow
along and grasp concepts based on context.)

The "dumb" way to do database queries in views
==============================================

Just as the previous chapter detailed a "dumb" way to output HTML within a
view (by hard-coding HTML directly within the view), there's a "dumb" way to
retrieve data from a database in a view. It's simple: Just use any existing
Python library to execute an SQL query and do something with the results.

In this example view, we use the ``MySQLdb`` library (available at
http://sourceforge.net/projects/mysql-python) to connect to a MySQL database,
retrieve some records and feed them to a template for display as a Web page::

    from django.shortcuts import render_to_response
    import MySQLdb

    def book_list(request):
        db = MySQLdb.connect(user='me', db='mydb', passwd='secret', host='localhost')
        cursor = db.cursor()
        cursor.execute('SELECT name FROM books ORDER BY name')
        names = [row[0] for row in cursor.fetchall()]
        db.close()
        return render_to_response('book_list.html', {'names': names})

This approach works, but some problems should jump out at you immediately:

    * We're hard-coding the database connection parameters. Ideally, these
      parameters would be stored in the Django configuration.

    * We're having to write a fair bit of boilerplate code: creating a
      connection, creating a cursor, executing a statement and closing the
      connection. Ideally, all we'd have to do is specify which results we
      wanted.

    * It ties us to MySQL. If, down the road, we switch from MySQL to
      PostgreSQL, we'll have to use a different database adapter (e.g.,
      ``psycopg`` rather than ``MySQLdb``), alter the connection parameters
      and -- depending on the nature of the SQL statement -- possibly rewrite
      the SQL. Ideally, the database server we're using would be abstracted, so
      that a database server change could be made in a single place.

As you might expect, Django's database layer aims to solve these problems.
Here's a sneak preview of how the above view can be rewritten using Django's
database API::

    from django.shortcuts import render_to_response
    from mysite.books.models import Book

    def book_list(request):
        books = Book.objects.order_by('name')
        return render_to_response('book_list.html', {'books': books})

We'll explain this code a little later in this chapter. For now, just get a
feel for how it looks.

The MTV development pattern
===========================

Before we delve into any more code, let's take a moment to consider the overall
design of a database-driven Django Web application.

As we've mentioned in previous chapters, Django is designed to encourage loose
coupling and strict separation between pieces of an application. If you follow
this philosophy, it's easy to make changes to one particular piece of the
application without affecting other pieces of the application. In view
functions, for instance, we discussed the importance of separating the business
logic from the presentation logic by using a template system. With the database
layer, we're applying that same philosophy to data-access logic.

Those three pieces together -- data-access logic, business logic and presentation
logic -- comprise a concept that's sometimes called the "Model View Controller"
(MVC) pattern of software architecture. In this pattern, "Model" refers to the
data-access layer, "View" refers to the part of the system that selects what to
display and how to display it, and "Controller" refers to the part of the
system that decides which view to use, depending on user input, accessing the
model as needed.

.. admonition:: Why the acronym?

    MVC? MTV? What's the point of these terms?

    The goal of explicitly defining patterns such as MVC is mostly to
    streamline communication among developers. Instead of having to tell your
    coworkers, "Let's make an abstraction of the data-access, then have a
    separate layer that handles data display, and let's put a layer in the
    middle that regulates this," you can take advantage of a shared vocabulary
    and say, "Let's use the MVC pattern here."

Django follows this MVC pattern closely enough that it can be called an MVC
framework. Here's roughly how the M, V and C break down in Django:

    * **M**, the data-access portion, is handled by Django's database layer,
      which is described in this chapter.

    * **V**, the portion that selects which data to display and how to display
      it, is handled by views and templates.

    * **C**, the portion that delegates to a view depending on user input, is
      handled by the framework itself by following your URLconf and calling the
      appropriate Python function for the given URL.

Because the "C" is handled by the framework itself and most of the excitement
in Django happens in models, templates and views, Django has been referred to
as an **MTV framework**. In the so-called MTV development pattern,

    * "M" stands for model, the data-access layer.

    * "T" stands for template, the presentation layer.

    * "V" stands for view, the business-logic layer.

If you're familiar with other MVC Web-development frameworks, such as Ruby on
Rails, you may consider Django views to be the "controllers" and Django
templates to be the "views." This is an unfortunate confusion brought about by
differing interpretations of MVC. In Django's interpretation of MVC, the "view"
describes the data that gets presented to the user; it's not necessarily just
*how* the data looks, but *which* data is presented. In contrast, Ruby on Rails
and similar frameworks suggest that the controller's job includes deciding
which data gets presented to the user, whereas the view is strictly *how* the
data looks, not *which* data is presented.

Neither interpretation is more "correct" than the other. The important thing is
to understand the underlying concepts.

Configuring the database
========================

With all of that philosophy in mind, let's start exploring Django's database
layer. First, we need to take care of some initial configuration; we need to
tell Django which database server to use and how to connect to it.

We'll assume you've set up a database server, activated it and created a
database within it (e.g., using a ``CREATE DATABASE`` statement). SQLite is a
special case; in that case, there's no database to create, because SQLite uses
standalone files on the filesystem to store its data.

As ``TEMPLATE_DIRS`` in the previous chapter, database configuration lives in
the Django settings file, called ``settings.py`` by default. Edit that file and
look for the database settings::

    DATABASE_ENGINE = ''
    DATABASE_NAME = ''
    DATABASE_USER = ''
    DATABASE_PASSWORD = ''
    DATABASE_HOST = ''
    DATABASE_PORT = ''

Here's a rundown of each setting.

    * ``DATABASE_ENGINE`` tells Django which database engine to use. If you're
      using a database with Django, ``DATABASE_ENGINE`` must be set to one of
      the following strings::

          =======================  ====================  ==============================================
          Setting                  Database              Required adapter
          =======================  ====================  ==============================================
          ``postgresql``           PostgreSQL            ``psycopg`` version 1.x,
                                                         http://initd.org/projects/psycopg1
          ``postgresql_psycopg2``  PostgreSQL            ``psycopg`` version 2.x,
                                                         http://initd.org/projects/psycopg2
          ``mysql``                MySQL                 ``MySQLdb``,
                                                         http://sourceforge.net/projects/mysql-python
          ``sqlite3``              SQLite                No adapter needed if using Python 2.5+.
                                                         Otherwise, ``pysqlite``,
                                                         http://initd.org/tracker/pysqlite
          ``ado_mssql``            Microsoft SQL Server  ``adodbapi`` version 2.0.1+,
                                                         http://adodbapi.sourceforge.net/
          ``oracle``               Oracle                ``cx_Oracle``,
                                                         http://www.python.net/crew/atuining/cx_Oracle/
          =======================  ====================  ==============================================

      Note that for whichever database backend you use, you'll need to download
      and install the appropriate database adapter. Each one is available for
      free on the Web.

    * ``DATABASE_NAME`` tells Django what the name of your database is. If
      you're using SQLite, specify the full filesystem path to the database
      file on your filesystem, e.g., ``'/home/django/mydata.db'``

    * ``DATABASE_USER`` tells Django which username to use when connecting to
      your database. If you're using SQLite, leave this blank.

    * ``DATABASE_PASSWORD`` tells Django which password to use when connecting
      to your database. If you're using SQLite or have an empty password, leave
      this blank.

    * ``DATABASE_HOST`` tells Django which host to use when connecting to your
      database. If your database is on the same computer as your Django
      installation (i.e., localhost), leave this blank. If you're using SQLite,
      leave this blank.

      MySQL is a special case here. If this value starts with a forward slash
      (``'/'``) and you're using MySQL, MySQL will connect via a Unix socket to
      the specified socket. For example::

          DATABASE_HOST = '/var/run/mysql'

      If you're using MySQL and this value *doesn't* start with a forward
      slash, then this value is assumed to be the host.

    * ``DATABASE_PORT`` tells Django which port to use when connecting to your
      database. If you're using SQLite, leave this blank. Otherwise, if you
      leave this blank, the underlying database adapter will use whichever
      port is default for your given database server. In most cases, the
      default port is fine, so you can leave this blank.

Once you've entered those settings, test your configuration. First, from within
the ``mysite`` project directory you created in Chapter 2, run the command
``python manage.py shell``.

You'll notice this starts a Python interactive interpreter. Looks can be
deceiving, though! There's an important difference between running the command
``python manage.py shell`` within your Django project directory and the more
generic ``python``. The latter is the basic Python shell, but the former tells
Django which settings file to use before it starts the shell. This is a key
requirement for doing database queries: Django needs to know which settings
file to use in order to get your database connection information.

Behind the scenes, ``python manage.py shell`` sets the environment variable
``DJANGO_SETTINGS_MODULE``. We'll cover the subtleties of this later, but for
now, just know that you should use ``python manage.py shell`` whenever you need
to drop into the Python interpreter to do Django-specific tinkering.

Once you've entered the shell, type these commands to test your database
configuration::

    >>> from django.db import connection
    >>> cursor = connection.cursor()

If nothing happens, then your database is configured properly. Otherwise, check
the error message for clues about what's wrong. Here are some common errors::

    ======================================  ==========================================
    Error message                           Solution
    ======================================  ==========================================
    ``You haven't set the DATABASE_ENGINE   Set the ``DATABASE_ENGINE`` setting to
    setting yet.``                          something other than an empty string.
    ``Environment variable
    DJANGO_SETTINGS_MODULE is undefined.``  Run the command ``python manage.py shell``
                                            rather than ``python``.
    ``Error loading _____ module: No        You haven't installed the appropriate
    module named _____.``                   database-specific adapter (e.g.
                                            ``psycopg`` or ``MySQLdb``).
    ``_____ isn't an available database     Set your ``DATABASE_ENGINE`` setting to
    backend. Available backends are ...``   one of the valid engine settings described
                                            above. Perhaps you made a typo?
    ``database _____ does not exist``       Change the ``DATABASE_NAME`` setting to
                                            point to a database that exists, or
                                            execute the appropriate
                                            ``CREATE DATABASE`` statement in order to
                                            create it.
    ``role _____ does not exist``           Change ``DATABASE_USER`` setting to point
                                            to a user that exists, or create the user
                                            in your database.
    ``could not connect to server...``      Make sure ``DATABASE_HOST`` and
                                            ``DATABASE_PORT`` are set correctly.
    ======================================  ==========================================

Your first app
==============

Now that you've verified the connection is working, it's time to create a
**Django app** -- a bundle of Django code, including models and views, that
lives together in a single Python package and represents a full Django
application.

It's worth explaining the terminology here, because this tends to trip up
beginners. We'd already created a *project*, in Chapter 2, so what's the
difference between a *project* and an *app*? The difference is that of
configuration vs. code:

    * A project is an instance of a certain set of Django apps, plus the
      configuration for those apps.

      Technically, the only requirement of a project is that it supplies a
      settings file, which defines the database connection information, the
      list of installed apps, the ``TEMPLATE_DIRS``, etc.

    * An app is a portable set of Django functionality, usually including
      models and views, that lives together in a single Python package.

      For example, Django comes with a number of apps, such as a commenting
      system and an automatic admin interface. A key thing to note about these
      apps is that they're portable and reusable across multiple projects.

There are very few hard-and-fast rules about how you fit your Django code into
this scheme; it's flexible. If you're building a simple Web site, you may only
use a single app. If you're building a complex Web site with several rather
unrelated pieces such as an e-commerce system and a message board, you'll
probably want to split those into separate apps so that you'll be able to reuse
them individually in the future.

Indeed, you don't necessarily need to create apps at all, as evidenced by the
example view functions we've created so far in this book. In those cases, we
simply created a file called ``views.py``, filled it with view functions and
pointed our URLconf at those functions. No "apps" were needed.

However, there's one requirement regarding the app convention: If you're using
Django's database layer (models), you must create a Django app. Models must
live within apps. Thus, in order to start writing our models, we'll need to
create a new app.

Within the ``mysite`` project directory you created in Chapter 2, type this
command to create a new app::

    python manage.py startapp books

(Why ``books``? That's the sample book app we'll be building together.)

This command does not result in any output, but it will have created a
``books`` directory within the ``mysite`` directory. Let's look at the contents
of that directory::

    books/
        __init__.py
        models.py
        views.py

These files will contain your models and views for this app.

Have a look at ``models.py`` and ``views.py`` in your favorite text editor.
Both files are empty, except for an import in ``models.py``. This is the blank
slate for your Django app.

Defining models in Python
=========================

As we discussed above, the "M" in "MTV" stands for "Model." A Django model is a
description of the data in your database, represented as Python code. It's your
data layout -- the equivalent of your SQL ``CREATE TABLE`` statements -- except
it's in Python instead of SQL. Django uses it to execute SQL code behind the
scenes and return convenient Python data structures representing the rows in
your database tables. Django also uses models to represent higher-level
concepts that SQL can't necessarily handle.

If you're familiar with databases, your immediate thought might be, "Isn't it
redundant to define data models in Python *and* in SQL?" Django works the way
it does for several reasons:

    * Introspection requires overhead and is not a complete solution.

      In order to provide convenient data-access APIs, Django needs to know the
      database layout *somehow*, and there are two ways of accomplishing this.
      The first way would be to explicitly describe the data in Python, and the
      second way would be to introspect the database at runtime to determine
      the data models.

      This second way seems cleaner, because the metadata about your tables
      only lives in one place, but it's got a few problems. First,
      introspecting a database at runtime obviously requires overhead. If the
      framework had to introspect the database each time it processed a
      request, or even when the Web server was initialized, this would incur a
      level of overhead unacceptable to the framework's developers. Django is
      intended to be as efficient as possible. Second, some databases, notably
      older versions of MySQL, do not store an amount of table metadata that's
      sufficient enough for accurate introspection.

    * Writing Python is fun, and keeping everything in Python limits the number
      of times your brain has to do a "context switch."

    * Having data models stored as code rather than in your database makes it
      easier to keep your models under version control.

    * SQL only allows for a certain level of metadata about a data layout. Most
      database systems, for example, do not provide a specialized data type for
      representing e-mail addresses or URLs, whereas Django models do, for
      convenience.

    * SQL is inconsistent across database platforms. If you're distributing a
      Web application, for example, it's much more convenient to distribute a
      Python module that describes your data layout than a set of MySQL
      ``CREATE TABLE`` statements, PostgreSQL ``CREATE TABLE`` statements and
      SQLite ``CREATE TABLE`` statements.

A drawback of this approach, however, is that it's possible for the Python code
to get out of sync with what's actually in the database. If you make changes to
a Django model, you'll need to make the same changes inside your database to
keep your database consistent with the model.

Finally, we should note that Django includes a utility that can create models
by introspecting an existing database. This is useful for quickly getting up
and running with legacy data.

Your first model
================

As an ongoing example in this chapter and the next chapter, we'll focus on a
basic book/author/publisher data layout. We use this as our example because the
conceptual relationships between books, authors and publishers are well-known,
and this is a common data layout used in introductory SQL textbooks.

We'll suppose these fields and relationships:

    * An author has a salutation (e.g., Mr. or Mrs.), a first name, a last
      name, an e-mail address and a headshot photo.

    * A publisher has a name, a street address, a city, a state/province, a
      country and a Web site.

    * A book has a title and a publication date. It also has one or more
      authors (a many-to-many relationship to author) and a single publisher
      (a one-to-many relationship, aka foreign key, to publisher).

The first step in using this database layout with Django is to express it as
Python code. In the ``models.py`` file that was created by the ``startapp``
command, enter the following::

    from django.db import models

    class Publisher(models.Model):
        name = models.CharField(maxlength=30)
        address = models.CharField(maxlength=50)
        city = models.CharField(maxlength=60)
        state_province = models.CharField(maxlength=30)
        country = models.CharField(maxlength=50)
        website = models.URLField()

    class Author(models.Model):
        salutation = models.CharField(maxlength=10)
        first_name = models.CharField(maxlength=30)
        last_name = models.CharField(maxlength=40)
        email = models.EmailField()
        headshot = models.ImageField()

    class Book(models.Model):
        title = models.CharField(maxlength=100)
        authors = models.ManyToManyField(Author)
        publisher = models.ForeignKey(Publisher)
        publication_date = models.DateField()

We will cover model syntax and options throughout this chapter, but let's
quickly examine this code to cover the basics. The first thing to notice is
that each model is represented by a Python class that is a subclass of
``django.db.models.Model``. The parent class, ``Model``, contains all the
functionality necessary to make these objects capable of interacting with a
database -- and that leaves our models responsible solely for defining their
fields, in a nice and compact syntax. Believe it or not, this is all the code
we need to write to have basic data access with Django.

Each model generally corresponds to a single database table, and each attribute
on a model generally corresponds to a column in that database table. The
attribute name corresponds to the column's name, and the type of field (e.g.,
``CharField``) corresponds to the database column type (e.g., ``varchar``). For
example, the ``Publisher`` model is equivalent to the following table (assuming
PostgreSQL ``CREATE TABLE`` syntax)::

    CREATE TABLE "books_publisher" (
        "id" serial NOT NULL PRIMARY KEY,
        "name" varchar(30) NOT NULL,
        "address" varchar(50) NOT NULL,
        "city" varchar(60) NOT NULL,
        "state_province" varchar(30) NOT NULL,
        "country" varchar(50) NOT NULL,
        "website" varchar(200) NOT NULL
    );

Indeed, Django can generate that ``CREATE TABLE`` statement itself, as we'll
see in a moment.

The exception to the one-class-per-database-table rule is the case of
many-to-many relationships. In our example models, ``Book`` has a
``ManyToManyField`` called ``authors``. This designates that a book has one or
many authors, but the ``Book`` database table doesn't get an ``authors``
column. Rather, Django creates an additional table -- a many-to-many "join
table" -- that handles the mapping of books to authors.

Finally, note we haven't explicitly defined a primary key in any of these
models. Unless you instruct it otherwise, Django automatically gives every
model an integer primary key field called ``id``. Each Django model is required
to have a single-column primary key.

Installing the model
====================

We've written the code; now, let's create the tables in our database. In order
to do that, the first step is to *activate* these models in our Django project.
We do that by adding this ``books`` app to the list of installed apps in the
settings file.

Edit the ``settings.py`` file again, and look for the ``INSTALLED_APPS``
setting. ``INSTALLED_APPS`` tells Django which apps are activated for a given
project. By default, it looks something like this::

    INSTALLED_APPS = (
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.sites',
    )

Temporarily comment out all four of those strings by putting a hash character
(``#``) in front of them. (They're included by default as a common-case
convenience, but we'll activate them and discuss them later.) Then, add
``'mysite.books'`` to the ``INSTALLED_APPS`` list, so the setting ends up
looking like this::

    INSTALLED_APPS = (
        #'django.contrib.auth',
        #'django.contrib.contenttypes',
        #'django.contrib.sessions',
        #'django.contrib.sites',
        'mysite.books',
    )

(As we're dealing with a single-element tuple here, don't forget the trailing
comma.)

``'mysite.books'`` refers to the ``books`` app we're working on. Each app in
``INSTALLED_APPS`` is represented by its full Python path -- that is, the path
of packages, separated by dots, leading to the app package.

Now that the Django app has been activated in the settings file, we can create
the database tables in our database. To do that, run this command from within
your project directory::

    python manage.py syncdb

You'll see something like this::

    Creating table books_publisher
    Creating table books_book
    Creating table books_author
    Installing index for books.Book model

The ``syncdb`` command is a simple "sync" of your models to your database. It
looks at all of the models in each app in your ``INSTALLED_APPS`` setting,
checks the database to see whether the appropriate tables exist yet, and
creates the tables if they don't yet exist. Note that ``syncdb`` does *not*
sync changes in models or deletions of models; if you make a change to a model
or delete a model, and you want to update the database, ``syncdb`` will not
handle that.

To prove it, run ``python manage.py syncdb`` again. Nothing happens -- because
you haven't added any models to the ``books`` app, or added any apps to
``INSTALLED_APPS``.

What databases did Django install? Run this command to see the ``CREATE TABLE``
SQL that Django executed behind the scenes, with pretty syntax highlighting
(Unix only)::

    python manage.py sqlall books

In this command, ``books`` is the name of the app. It's what you specified when
you ran the command ``manage.py startapp``.

If you're interested, take a moment to dive into your database server's
command-line client and see the database tables Django created. You can
manually run the command-line client -- e.g., ``psql`` for PostgreSQL -- or
you can run the command ``python manage.py dbshell``, which will figure out
which command-line client to run, depending on your ``DATABASE_SERVER``
setting. The latter is almost always more convenient.


Saving objects to the database
==============================

Once you've created a model, Django automatically provides a high-level Python
API for working with those models. Try it out by running
``python manage.py shell`` and typing the following::

    >>> from books.models import Publisher
    >>> p = Publisher(name='Apress', address='2560 Ninth St.',
    ...     city='Berkeley', state_province='CA', country='U.S.A.',
    ...     website='http://www.apress.com/')
    >>> p.save()
    >>> p = Publisher(name="O'Reilly", address='10 Fawcett St.',
    ...     city='Cambridge', state_province='MA', country='U.S.A.',
    ...     website='http://www.oreilly.com/')
    >>> p.save()
    >>> publisher_list = Publisher.objects.all()
    >>> publisher_list
    [<Publisher: Publisher object>, <Publisher: Publisher object>]

Although it's only a few lines of code, this actually does quite a bit. The
highlights:

    * To create an object, just import the appropriate model class and
      instantiate it by passing in values for each field.

    * To save the object to the database, call the ``save()`` method on the
      object. Behind the scenes, Django executes an SQL ``INSERT`` statement
      here.

    * To retrieve objects from the database, use ``Publisher.objects``. Fetch a
      list of all ``Publisher`` objects in the database with the statement
      ``Publisher.objects.all()``. Behind the scenes, Django executes an SQL
      ``SELECT`` statement here.

There's quite a lot more you can do here -- and, in fact, Appendix 3 has a
complete reference to this database API -- but first, let's take care of a
small annoyance. Above, when we printed out the list of publishers, all we got
was an unhelpful display::

    [<Publisher: Publisher object>, <Publisher: Publisher object>]

We can fix this easily by adding a method called ``__str__()`` to our
``Publisher`` object. A ``__str__()`` method tells Python how to display the
"string" representation of an object. You can see this in action by adding a
``__str__()`` method to the three models:

.. parsed-literal::

    class Publisher(models.Model):
        name = models.CharField(maxlength=30)
        address = models.CharField(maxlength=50)
        city = models.CharField(maxlength=60)
        state_province = models.CharField(maxlength=30)
        country = models.CharField(maxlength=50)
        website = models.URLField()

        **def __str__(self):**
            **return self.name**

    class Author(models.Model):
        salutation = models.CharField(maxlength=10)
        first_name = models.CharField(maxlength=30)
        last_name = models.CharField(maxlength=40)
        email = models.EmailField()
        headshot = models.ImageField()

        **def __str__(self):**
            **return '%s %s' % (self.first_name, self.last_name)**

    class Book(models.Model):
        title = models.CharField(maxlength=100)
        authors = models.ManyToManyField(Author)
        publisher = models.ForeignKey(Publisher)
        publication_date = models.DateField()

        **def __str__(self):**
            **return self.title**

As you can see, a ``__str__()`` method can do whatever it needs to do in order
to return a string representation. Here, the ``__str__()`` methods for
``Publisher`` and ``Book`` simply return the object's name and title,
respectively, but the ``__str__()`` for ``Author`` is slightly more complex --
it pieces together the ``first_name`` and ``last_name`` fields. The only
requirement for ``__str__()`` is that it return a string. If ``__str__()``
doesn't return a string -- if it returns, say, an integer -- then Python will
raise a ``TypeError`` with a message like ``"__str__ returned non-string"``.

For the changes to take effect, exit out of the Python shell and enter it again
with ``python manage.py shell``. (This is the easiest way to make code changes
take effect.) Now, the list of ``Publisher`` objects is much easier to
understand::

    >>> from books.models import Publisher
    >>> publisher_list = Publisher.objects.all()
    >>> publisher_list
    [<Publisher: Apress>, <Publisher: O'Reilly>]

You'll want to make sure any model you define has a ``__str__()`` method -- not
only for your own convenience when using the interactive interpreter, but also
because Django uses the output of ``__str__()`` in several places when it needs
to display objects.










Customizing object metadata
===========================

To save you time, Django automatically derives the name of the database table
from the name of your model class and the app that contains it. A model's
database table name is constructed by joining the model's "app label" -- the
name you used in ``manage.py startapp`` -- to the model's class name, with an
underscore between them.

So, if you examine your database now (or the output of ``manage.py sql
crimes``) you'll see that Django has automatically named the ``Crime`` table
``crimes_crime``.

So what if you're sharing a database with other users and you need to be
careful about table names, or what if you just don't like the automatic name?
Well, each Django model can define metadata about that object; this is done by
defining an inner class called ``Meta``::

    class Crime(models.Model):
        when        = models.DateTimeField()
        location    = models.CharField(maxlength=300)
        description = models.TextField()

        class Meta:
            db_table = "crimes"

The ``db_table`` option overrides the default table name that Django uses.
There's really no reason to use this option now, so for the rest of this
walkthrough we'll assume you removed it.

.. admonition:: Philosophy

    You'll see this pattern repeated everywhere in Django.  The framework
    provides sensible defaults, but always lets you override them if you
    need more fine-grained control.

.. XXX JGD No nod/snark to "convention over configuration"?

Of course, there are other ``Meta`` options available; refer to Chapter XXX
for a complete reference.

Relations
=========

Of course, what's the point of using a relational database if we don't use
relations? Let's refine our ``Crime`` object to be somewhat better designed.
Right now, we're simply stuffing a description of the crime into the
``description`` field, but that will quickly fill up with duplicate values
like "carjacking" and "distributing cigarettes to minors". Let's break those
crime types out into a related object::

    class CrimeType(models.Model):
        name        = models.CharField(maxlength=250)
        is_felony   = models.BooleanField()

        def __str__(self):
            return self.name

.. XXX JGD This has to be in the models.py file before Crime, right?  It'd be good to note it.

Here we've defined a "crime type" object which we'll populate with all the
possible crimes on the books. Now we'll modify the exiting ``Crime`` object to
replace the ``description`` field with a relation to this one::

    class Crime(models.Model):
        when        = models.DateTimeField()
        location    = models.CharField(maxlength=300)
        type        = models.ForeignKey(CrimeType)

.. XXX JGD You're both modifying an existing bit of code and excluding
.. XXX JGD some previously-added code.  It'd be good to make it clear that the other
.. XXX JGD code is not to be removed.  Perhaps a small
.. XXX JGD admonition at the first occurrence of this in the book?

This defines a foreign key on the ``type`` field which points to a ``CrimeType``.

.. admonition:: Huh?

    What's a "foreign key"?  If you're not familiar with database terminology,
    XXX what should they do??? XXX

.. XXX JGD We could just have a glossary for the book (which could include any DB terms
.. XXX JGD you don't want to assume).  Or, if it's not too political, you could recommend
.. XXX JGD a couple books (one for each popular backend?).
.. XXX JGD Lastly, Wikipedia has nice relation data modeling coverage:
.. XXX JGD http://en.wikipedia.org/wiki/Category:Data_modeling

Modifying models
================

If you actually try to use these models at this point, you'll quickly find
problems. Although you've changed the ``Crime`` model, those changes can't
automatically be transfered into the database. You've got to inform the
database that you've changed the model, and you've got two options::

    1. Use SQL to modify the database tables.  That is, use ``ALTER TABLE``
       commands to modify the database directly to match the model.

       This is the approach you have to take if you've already got important
       data stored in the database.

    2. If, however, you don't care about the data in the database, you can
       "reset" a given model, dropping and restoring the tables involved.

Since we've just started, we'll take the second route.  Run::

    $ python manage.py reset crimes

Django will ask you if you're *sure* that this is something you want to do;
say "yes" and the old tables will be dropped and new ones created.

.. admonition:: Philosophy:

    Yes, you're right to think that option 1 looks pretty difficult.  If
    you've got to make a schema change in an application with a bunch of
    existing data it can indeed be time-consuming.

    However, automated tools could be very dangerous here. Django won't
    automatically modify your database for you; that could lead to
    catastrophic data loss.

    So, spend a little extra time up front making sure your models are
    well-defined and future-proof.  You'll recover that time in spades
    in the future -- trust us!

.. XXX JGD It's impossible to future-proof, and its wrong to suggest it is possible.
.. XXX JGD As a newcomer to Django, this looks suspiciously like the Python-defined
.. XXX JGD models is necessary but not sufficient for the DRY principle.
.. XXX JGD Migration code obviously shouldn't be automated.
.. XXX JGD What's up with http://code.djangoproject.com/wiki/SchemaEvolution#conclusions ?
.. XXX JGD Assuming that won't be done, the book should at least go through one
.. XXX JGD real-worldy model design update process.
.. XXX JGD Another thing that would help is to explain the thought process involved in
.. XXX JGD future-proofing (with your crystal ball).
.. XXX JGD I'm not tryin' to be a jerk, but you can't pretend it's not an issue.  :)

Using relations in the Python API
=================================

Now that we've got CrimeType defined in the database, we'll set up a few
example Crimes using the new ``CrimeType`` to explore the Django API for
foreign keys.  Back to the shell::

    $ python manage.py shell
    >>> from crimes.models import Crime, CrimeType
    >>> from datetime import datetime
    >>> jaywalking = CrimeType(name="Jaywakling", is_felony=False)
    >>> jaywalking.save()
    >>> florida_jaywalking = Crime(when=datetime.now(),
    ...                            location="1211 Florida St", type=jaywalking)
    >>> florida_jaywalking.save()
    >>> fortysecond_jaywalking = Crime(when=datetime.now(),
    ...                            location="1301 W. 42nd St", type=jaywalking)
    >>> fortysecond_jaywalking.save()

Now you can retrieve all Crimes of the same CrimeType for any given Crime::

    >>> fortysecond_jaywalking.type.crime_set.all()
    [<Crime: Crime at 1211 Florida St on 2006-05-17>, <Crime: Crime at 1301 W. 42nd St on 2006-05-17>]

Those Crimes refer to the same CrimeType object so that changes in the
CrimeType are reflected in all Crimes::

    >>> jaywalking.crime_set.all()[0].type
    <CrimeType: Jaywakling>
    >>> jaywalking.name="Jaywalking"
    >>> jaywalking.save()
    >>> jaywalking.crime_set.all()[0].type
    <CrimeType: Jaywalking>
    >>> jaywalking.crime_set.all()[1].type
    <CrimeType: Jaywalking>

XXX explain interesting code here

.. XXX: talk about M2M next, or leave that for the ref?

.. XXX JGD Is there an M2M in chicrime that's not too out of the way?

.. XXX JGD Also, I think it'd be good to talk about model cycles.
.. XXX JGD A Person is holding an Event which has a list of Invitees.
.. XXX JGD This may be a pet issue since I ran into it w/ MediaWiki's existing schema.

What's next?
============

At this point you know enough (with the help of the reference in Chapter XXX)
to start writing your own models. However, in the next chapter we'll step
aside to look at the best-looking piece of Django: the automatic admin
interface.
